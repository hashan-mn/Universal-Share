class UniversalShare { constructor(e, t = {}) { if (this.selector = e, this.element = document.querySelector(e), !this.element) { console.error(`UniversalShare: Element with selector "${e}" not found`); return } this.config = { platforms: ["facebook", "twitter", "linkedin", "whatsapp", "email", "copy"], theme: "default", size: "medium", layout: "horizontal", position: "inline", showText: !0, showCounter: !1, title: document.title, url: window.location.href, description: document.querySelector('meta[name="description"]')?.content || "", iconLibrary: "fontawesome", iconPrefix: { fontawesome: "fa", icomoon: "icon" }, openMethod: "popup", popupSettings: { width: 600, height: 400, scrollbars: 1, resizable: 1, toolbar: 0, location: 0, directories: 0, status: 0, menubar: 0, copyhistory: 0 }, onShare: null, customIcons: {}, customPlatforms: {}, ...t }, this.platforms = { facebook: { name: "Facebook", icons: { fontawesome: "fab fa-facebook-f", icomoon: "icon-facebook" }, color: "#1877f2", url: (e, t) => `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(e)}` }, twitter: { name: "Twitter", icons: { fontawesome: "fab fa-twitter", icomoon: "icon-twitter" }, color: "#1da1f2", url: (e, t) => `https://twitter.com/intent/tweet?url=${encodeURIComponent(e)}&text=${encodeURIComponent(t)}` }, linkedin: { name: "LinkedIn", icons: { fontawesome: "fab fa-linkedin-in", icomoon: "icon-linkedin" }, color: "#0077b5", url: (e, t) => `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(e)}` }, whatsapp: { name: "WhatsApp", icons: { fontawesome: "fab fa-whatsapp", icomoon: "icon-whatsapp" }, color: "#25d366", url: (e, t) => `https://wa.me/?text=${encodeURIComponent(t + " " + e)}` }, telegram: { name: "Telegram", icons: { fontawesome: "fab fa-telegram-plane", icomoon: "icon-telegram" }, color: "#0088cc", url: (e, t) => `https://t.me/share/url?url=${encodeURIComponent(e)}&text=${encodeURIComponent(t)}` }, reddit: { name: "Reddit", icons: { fontawesome: "fab fa-reddit-alien", icomoon: "icon-reddit" }, color: "#ff4500", url: (e, t) => `https://www.reddit.com/submit?url=${encodeURIComponent(e)}&title=${encodeURIComponent(t)}` }, pinterest: { name: "Pinterest", icons: { fontawesome: "fab fa-pinterest-p", icomoon: "icon-pinterest" }, color: "#bd081c", url: (e, t) => `https://pinterest.com/pin/create/button/?url=${encodeURIComponent(e)}&description=${encodeURIComponent(t)}` }, tumblr: { name: "Tumblr", icons: { fontawesome: "fab fa-tumblr", icomoon: "icon-tumblr" }, color: "#00cf35", url: (e, t) => `https://www.tumblr.com/widgets/share/tool?canonicalUrl=${encodeURIComponent(e)}&title=${encodeURIComponent(t)}` }, email: { name: "Email", icons: { fontawesome: "fas fa-envelope", icomoon: "icon-mail" }, color: "#34495e", url: (e, t) => `mailto:?subject=${encodeURIComponent(t)}&body=${encodeURIComponent(e)}` }, copy: { name: "Copy Link", icons: { fontawesome: "fas fa-link", icomoon: "icon-link" }, color: "#6c5ce7", action: "copy" }, print: { name: "Print", icons: { fontawesome: "fas fa-print", icomoon: "icon-printer" }, color: "#95a5a6", action: "print" }, sms: { name: "SMS", icons: { fontawesome: "fas fa-sms", icomoon: "icon-mobile" }, color: "#2ecc71", url: (e, t) => `sms:?body=${encodeURIComponent(t + " " + e)}` } }, this.platforms = { ...this.platforms, ...this.config.customPlatforms }, this.init() } init() { this.render(), this.bindEvents() } render() { let e = document.createElement("div"); e.className = this.getContainerClasses(); let t = document.createElement("div"); t.className = this.getButtonsContainerClasses(), this.config.platforms.forEach(e => { if (this.platforms[e]) { let o = this.createButton(e); t.appendChild(o) } }), e.appendChild(t), this.element.appendChild(e), this.applyCustomStyles(e) } getContainerClasses() { let e = ["universal-share"]; return "default" !== this.config.theme && e.push(this.config.theme), "inline" !== this.config.position && e.push(this.config.position), e.join(" ") } getButtonsContainerClasses() { let e = ["share-buttons"]; return "horizontal" !== this.config.layout && e.push(this.config.layout), e.join(" ") } getIconClass(e) { let t = this.platforms[e]; if (this.config.customIcons[e]) return this.config.customIcons[e]; if ("both" === this.config.iconLibrary) { let o = t.icons?.fontawesome || "", i = t.icons?.icomoon || ""; return `${o} ${i}`.trim() } return "icomoon" === this.config.iconLibrary ? t.icons?.icomoon || t.icons?.fontawesome || "" : t.icons?.fontawesome || t.icons?.icomoon || "" } createButton(e) { let t = this.platforms[e], o = document.createElement("a"), i = ["share-btn", e]; "medium" !== this.config.size && i.push(this.config.size), this.config.showText || i.push("icon-only"), o.className = i.join(" "); let n = this.getIconClass(e), s = document.createElement("i"); s.className = n; let a = document.createElement("span"); if (a.className = "btn-text", a.textContent = t.name, o.appendChild(s), o.appendChild(a), t.action) o.href = "#", o.addEventListener("click", o => { o.preventDefault(), this.handleAction(t.action, e) }); else if (t.url) { let r = t.url(this.config.url, this.config.title); o.href = r, "popup" === this.config.openMethod ? o.addEventListener("click", t => { t.preventDefault(), this.openPopup(r, e), this.handleShare(e) }) : ("newtab" === this.config.openMethod && (o.target = "_blank", o.rel = "noopener noreferrer"), o.addEventListener("click", () => { this.handleShare(e) })) } return o } openPopup(e, t) { let o = this.config.popupSettings; this.platforms[t]; let i = void 0 !== window.screenLeft ? window.screenLeft : window.screenX, n = void 0 !== window.screenTop ? window.screenTop : window.screenY, s = window.innerWidth || document.documentElement.clientWidth || window.screen.width, a = window.innerHeight || document.documentElement.clientHeight || window.screen.height, r = s / 2 - o.width / 2 + i, c = a / 2 - o.height / 2 + n, l = `width=${o.width},height=${o.height},top=${c},left=${r},scrollbars=${o.scrollbars},resizable=${o.resizable},toolbar=${o.toolbar},location=${o.location},directories=${o.directories},status=${o.status},menubar=${o.menubar},copyhistory=${o.copyhistory}`, h = window.open(e, `share_${t}`, l); return h && h.focus(), h } handleAction(e, t) { switch (e) { case "copy": this.copyToClipboard(); break; case "print": window.print() }this.handleShare(t) } handleShare(e) { this.trackShare(e), "function" == typeof this.config.onShare && this.config.onShare(e, this.config.openMethod) } copyToClipboard() { navigator.clipboard && navigator.clipboard.writeText ? navigator.clipboard.writeText(this.config.url).then(() => { this.showNotification("Link copied to clipboard! \uD83D\uDCCB") }).catch(() => { this.fallbackCopyTextToClipboard() }) : this.fallbackCopyTextToClipboard() } fallbackCopyTextToClipboard() { let e = document.createElement("textarea"); e.value = this.config.url, e.style.top = "0", e.style.left = "0", e.style.position = "fixed", e.style.opacity = "0", document.body.appendChild(e), e.focus(), e.select(); try { document.execCommand("copy"), this.showNotification("Link copied to clipboard! \uD83D\uDCCB") } catch (t) { this.showNotification("Could not copy link ❌") } document.body.removeChild(e) } showNotification(e) { let t = document.getElementById("share-notification"); t || ((t = document.createElement("div")).id = "share-notification", t.className = "share-notification", document.body.appendChild(t)), t.textContent = e, t.classList.add("show"), setTimeout(() => { t.classList.remove("show") }, 3e3) } trackShare(e) { "undefined" != typeof gtag && gtag("event", "share", { method: e, content_type: "article", item_id: this.config.url, custom_parameters: { open_method: this.config.openMethod } }), console.log(`Shared on ${e} via ${this.config.openMethod}:`, this.config.url) } applyCustomStyles(e) { this.config.position } bindEvents() { window.addEventListener("resize", () => { }) } updateConfig(e) { this.config = { ...this.config, ...e }, this.element.innerHTML = "", this.render() } setOpenMethod(e) { ["popup", "newtab", "same"].includes(e) && (this.config.openMethod = e, this.element.innerHTML = "", this.render()) } setIconLibrary(e) { ["fontawesome", "icomoon", "both"].includes(e) && (this.config.iconLibrary = e, this.element.innerHTML = "", this.render()) } updatePopupSettings(e) { this.config.popupSettings = { ...this.config.popupSettings, ...e } } destroy() { this.element.innerHTML = ""; let e = document.getElementById("share-notification"); e && e.remove() } addPlatform(e, t) { this.platforms[e] = t, this.config.platforms.includes(e) || (this.config.platforms.push(e), this.element.innerHTML = "", this.render()) } removePlatform(e) { let t = this.config.platforms.indexOf(e); t > -1 && (this.config.platforms.splice(t, 1), this.element.innerHTML = "", this.render()) } }